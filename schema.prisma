// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  email     String     @unique
  password  String
  role      Role
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Events    Event[]
  Feedbacks Feedback[]
}

model Event {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String
  date        DateTime
  location    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  organizerId String
  Organizer   User       @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  Feedbacks   Feedback[]
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  rating    Int
  createdAt DateTime @default(now())
  userId    String
  eventId   String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Search {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  query       String
  resultCount Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  LEARNER
  TUTOR
  ADMINISTRATOR
}

